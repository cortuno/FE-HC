% test version

function F=driver

% clear the console screen
clc; close all;clf
% load the data structure with info pertaining to the physical problem
dat.diff=2;
dat.siga=.5;
dat.esrc=10;
dat.width=10;
bc.left.type=2; %0=neumann, 1=robin, 2=dirichlet
bc.left.C=5; % (that data is C in: -Ddu/dn=C // u/4+D/2du/dn=C // u=C)
bc.rite.type=1;
bc.rite.C=7;
dat.bc=bc; clear bc;

% load the numerical parameters, npar, structure pertaining to numerics
% number of elements
npar.nel = 5000;
% domain
npar.x = linspace(0,dat.width,npar.nel+1);
% polynomial degree
npar.porder=1;
% nbr of dofs per variable
npar.ndofs = npar.porder*npar.nel+1;
% connectivity
gn=zeros(npar.nel,npar.porder+1);
gn(1,:)=linspace(1,npar.porder+1,npar.porder+1);
for iel=2:npar.nel
    gn(iel,:)=[gn(iel-1,end) , gn(iel-1,2:end)+npar.porder ];
end
npar.gn=gn; clear gn;

% solve system
F = solve_fem1(dat,npar);
% plot
figure(1)
plot(npar.x,F,'.-'); hold all
% verification is always good
verif_diff_eq(dat)

return
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function verif_diff_eq(dat)

sa=dat.siga; cd=dat.diff; src=dat.esrc; L=dat.width;

k=1/sqrt(cd/sa);
% particular solution
part=src/sa;
% general form of the solution:
%  phi =A sh(kx) + B ch(kx) + src/abso
%  dphi/dx= k (A ch(kx) + B sh(kx) )
switch dat.bc.left.type
    case 0 % Neumann
        mat(1,1:2) =k*[ cosh(0), sinh(0)];
        b(1) = -dat.bc.left.C / cd;
    case 1 % Robin
        mat(1,1:2) =[ sinh(0), cosh(0)]/4 -cd/2*k*[ cosh(0), sinh(0)];
        b(1) = dat.bc.left.C -part/4;
    case 2 % Dirichlet
        mat(1,1:2) =[ sinh(0), cosh(0)];
        b(1) = dat.bc.left.C -part;
end    
switch dat.bc.rite.type
    case 0 % Neumann
        mat(2,1:2) =k*[ cosh(k*L), sinh(k*L)];
        b(2) = dat.bc.rite.C / cd;
    case 1 % Robin
        mat(2,1:2) =[ sinh(k*L), cosh(k*L)]/4 +cd/2*k*[ cosh(k*L), sinh(k*L)];
        b(2) = dat.bc.rite.C -part/4;
    case 2 % Dirichlet
        mat(2,1:2) =[ sinh(k*L), cosh(k*L)];
        b(2) = dat.bc.rite.C -part;
end  
% get coefficient for the analytical solution
a=mat\b';
x=linspace(0,L);
y=a(1)*sinh(k*x)+a(2)*cosh(k*x)+part;
plot(x,y,'r-');
legend(['fem';'exa'],'Location','Best');
return
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function u=solve_fem1(dat,npar)

% initial guess 
% (not needed if a direct method is used to solve the linear system)
u=ones(npar.ndofs,1);

% assemble the matrix and the rhs
[A,b]=assemble_system(npar,dat);

% solve 
u=A\b;

return
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [A,rhs]=assemble_system(npar,dat)
% assemble the matrix, the rhs, apply BC

% shortcuts
porder= npar.porder; 
gn    = npar.gn;
nel   = npar.nel;
% ideally, we would analyze the connectivity to determine nnz
nnz=(porder+1)*nel; %this is an upperbound, not exact
% n: linear system size
n=nel*porder+1;
% allocate memory
A=spalloc(n,n,nnz); 
rhs=zeros(n,1);

% compute local matrices
if(porder~=1)
    error('Only local matrices for porder=1');
else
    m=[2 1;1 2]/3; % mass matrix
    k=[1 -1; -1 1]/2; % stiffness matrix
    f=[1;1]; % load vector
end

% definition of the weak form:
% int_domain (grad u D grad b) - int_bd_domain (b D grad u n) ...
%      + int_domain( XSa u b) = int_domain (b rhs)

% loop over elements
for iel=1:npar.nel
    % element extremities
    x0=npar.x(iel);
    x1=npar.x(iel+1);
    % jacobian of the transformation to the ref. element
    Jac=(x1-x0)/2;
    % assemble
    A(gn(iel,:),gn(iel,:)) = A(gn(iel,:),gn(iel,:)) + ...
        dat.siga*m*Jac + dat.diff*k/Jac;
    rhs(gn(iel,:)) = rhs(gn(iel,:)) + dat.esrc*f*Jac;
end

% apply natural BC
Dirichlet_nodes=[];
Dirichlet_val=[];
switch dat.bc.left.type
    case 0 % Neumann, int_bd_domain (b D grad u n) is on the RHS
        rhs(1)=rhs(1)+dat.bc.left.C;
    case 1 % Robin
        A(1,1)=A(1,1)+1/2;
        rhs(1)=rhs(1)+2*dat.bc.left.C;
    case 2 % Dirichlet
        Dirichlet_nodes=[Dirichlet_nodes 1];
        Dirichlet_val=[Dirichlet_val dat.bc.left.C];
end    
switch dat.bc.rite.type
    case 0 % Neumann, int_bd_domain (b D grad u n) is on the RHS
        rhs(n)=rhs(n)+dat.bc.rite.C;
    case 1 % Robin
        A(n,n)=A(n,n)+1/2;
        rhs(n)=rhs(n)+2*dat.bc.rite.C;
    case 2 % Dirichlet
        Dirichlet_nodes=[Dirichlet_nodes n];
        Dirichlet_val=[Dirichlet_val dat.bc.rite.C];
end    
% apply Dirichlet BC
for i=1:length(Dirichlet_nodes);% loop on the number of constraints
    id=Dirichlet_nodes(i);      % extract the dof of a constraint
    bcval=Dirichlet_val(i);
    rhs=rhs-bcval*A(:,id);  % modify the rhs using constrained value 
    A(id,:)=0; % set all the id-th row to zero
    A(:,id)=0; % set all the id-th column to zero (symmetrize A)
    A(id,id)=1;            % set the id-th diagonal to unity
    rhs(id)=bcval;         % put the constrained value in the rhs
end

return
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
